{"version":3,"sources":["assets/search.svg","assets sync /^/.//.*/.svg$","assets/pause.svg","assets/play.svg","assets/appLogo.png","utils/common.utils.js","constants.js","utils/api.utils.js","components/Search/index.js","components/Gif/index.js","components/Grid/index.js","components/Header/index.js","components/App/index.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./pause.svg","./play.svg","./search.svg","webpackContext","req","id","webpackContextResolve","o","e","Error","code","keys","Object","resolve","initialiseDataArray","noOfColumns","currentScreenWidth","window","innerWidth","getNoOfColumns","Array","fill","data","totalHeight","formatGiphyData","dataFromGiphyAPI","arguments","length","undefined","gridData","forEach","gifData","heightArray","columnHeightArray","g","currentColumnIndex","indexOf","Math","min","apply","toConsumableArray","push","moving","images","fixed_width","still","fixed_width_still","key","title","Number","height","isScrollBottom","innerHeight","scrollY","document","body","offsetHeight","callGiphyAPI","searchValue","count","apiPath","concat","getSearchAPIPath","fetch","then","response","json","catch","err","console","error","Search","state","value","onKeyDown","event","_this","updateValue","onChange","setState","target","props","updateSearchValue","react_default","a","createElement","className","type","this","placeholder","disabled","src","require","alt","onClick","Component","defaultProps","Gif","isPlaying","isPlayingAll","cachedProp","toggleGifPlaying","_this$props","imageData","cellWidth","iconName","currentImage","imageWidth","GIF_PADDING","imageHeight","width","style","margin","url","nextProps","prevState","Grid","getGridColumn","gridItemData","components_Gif","gridLength","_this2","renderGrid","gridColumnData","index","Header","togglePlayingState","gifControlText","children","getTrendingGif","App","apiCallCount","noGIf","apiCallInProgress","componentDidMount","updateGiphyData","addEventListener","onScroll","_callee","_args","regenerator_default","wrap","_context","prev","next","getGiphyData","stop","_this$state","formattedData","componentWillUnmount","removeEventListener","_this$state2","components_Header","components_Search","components_Grid","ReactDOM","render","components_App","getElementById"],"mappings":"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","file":"static/js/main.e7e4e03b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search.35fb3dd2.svg\";","var map = {\n\t\"./pause.svg\": 23,\n\t\"./play.svg\": 24,\n\t\"./search.svg\": 8\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 22;","module.exports = __webpack_public_path__ + \"static/media/pause.ca47aee8.svg\";","module.exports = __webpack_public_path__ + \"static/media/play.fd3f2017.svg\";","module.exports = __webpack_public_path__ + \"static/media/appLogo.15c492c6.png\";","import {MIN_WIDTH_DESKTOP, MAX_WIDTH_DESKTOP, SCROLL_OFFSET, APP_MARGIN_HORIZONTAL} from '../constants';\n/**\n * getNoOfColumns: returns the no of columns based on the screen viewport width\n */\nexport const getNoOfColumns = () => {\n    const currentScreenWidth = window.innerWidth;    \n    let noOfColumns = 2; // Minimum no of columns\n    if(currentScreenWidth > MAX_WIDTH_DESKTOP) {        \n        noOfColumns = 6;\n    }    \n    else if(currentScreenWidth >= MIN_WIDTH_DESKTOP) {\n        noOfColumns = 4;\n    }  \n    return noOfColumns;\n}\n\n/**\n * initialiseDataArray: returns an array with filled initial value\n * to store data and total height of each column\n */\nexport const initialiseDataArray = () => {\n    const noOfColumns = getNoOfColumns();\n    const arr = new Array(noOfColumns).fill(null);\n    return arr.map(() => ( {data: [], totalHeight: 0})); \n}\n\n/**\n * findIndexOfLowestHeightColumn: returns the index of the column with the lowest height\n */\nexport const findIndexOfLowestHeightColumn = (heightArray) => heightArray.indexOf(Math.min(...heightArray));\n\n/**\n * formatData: returns formatted data from the api according to column structure \n * defined in 'initialiseDataArray'\n */\nexport const formatGiphyData = (dataFromGiphyAPI = [], gridData) => {\n    dataFromGiphyAPI.forEach( gifData => {\n        const columnHeightArray = gridData.map(g => g.totalHeight);\n        const currentColumnIndex = findIndexOfLowestHeightColumn(columnHeightArray);\n        gridData[currentColumnIndex].data.push({\n            moving: gifData.images.fixed_width,\n            still: gifData.images.fixed_width_still,\n            key: gifData.id,\n            title: gifData.title\n        });\n        gridData[currentColumnIndex].totalHeight += Number(gifData.images.fixed_width.height);\n    });\n  return gridData;\n}\n\nexport const isScrollBottom = () => (window.innerHeight + window.scrollY) >= (document.body.offsetHeight - SCROLL_OFFSET);\nexport const getCellWidth = (gridLength) => ((window.innerWidth-(2*APP_MARGIN_HORIZONTAL)) / gridLength);","export const APIKEY = 'lmdFUQVnyLK4jA2jRvnLKjqUXfE0mY6G';\nexport const GIF_LIMIT = 20;\nexport const BASE_URL = 'https://api.giphy.com/v1/gifs/';\nexport const MIN_WIDTH_DESKTOP = 768;\nexport const MAX_WIDTH_DESKTOP = 1600;\nexport const SCROLL_OFFSET = 200;\nexport const GIF_PADDING = 10;\nexport const SEARCH_PATH = 'search?q=';\nexport const TRENDING_PATH = 'trending';\nexport const APP_MARGIN_HORIZONTAL = 60;","import {APIKEY, GIF_LIMIT, BASE_URL} from '../constants'\n\nexport const getSearchAPIPath = (searchValue) => `search?q=${searchValue}&`;\nexport const getTrendingAPIPath = () => 'trending?';\n\nexport const callGiphyAPI = (searchValue, count=0) => {\n    const apiPath = searchValue ? getSearchAPIPath(searchValue) : getTrendingAPIPath();\n    return fetch(`${BASE_URL}${apiPath}api_key=${APIKEY}&limit=${GIF_LIMIT}&offset=${(count*GIF_LIMIT)}`)\n    .then((response) => response.json())\n    .then((response) => response)\n    .catch((err) => console.error(err));\n}","import React, {Component} from 'react';\nimport PropTypes from 'prop-types'; \nimport './Search.css';\n\nclass Search extends Component {\n    state = {\n        value: ''\n    }\n    onKeyDown = (event) => event.key === 'Enter' && this.updateValue();\n    onChange = (event) => this.setState({value: event.target.value});\n    updateValue = () => this.props.updateSearchValue(this.state.value);\n   render() {       \n       return (\n           <div className='searchContainer'>\n            <input type = 'text' \n            onKeyDown = {this.onKeyDown}\n            onChange={this.onChange}\n            placeholder='Search'\n            className=\"searchInput\"\n            disabled={this.props.disabled}\n            />\n           <img className=\"searchIcon\" src={require(`../../assets/search.svg`)} alt=\"search\" onClick={this.updateValue}/>\n           </div>\n       )\n   }\n}\n\nSearch.defaultProps = {\n    updateSearchValue: () => {}\n}\n\nSearch.propTypes = {\n    updateSearchValue: PropTypes.func\n}\n\nexport default Search","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {GIF_PADDING} from '../../constants';\nimport './Gif.css';\n\nclass Gif extends Component {\n   state = {\n       isPlaying: this.props.isPlayingAll,\n       cachedProp: this.props.isPlayingAll\n   }\n\n   static getDerivedStateFromProps(nextProps, prevState) {\n    if(nextProps.isPlayingAll !== prevState.cachedProp) {\n        return {isPlaying: nextProps.isPlayingAll, cachedProp: nextProps.isPlayingAll};\n    }\n    return null;\n   }\n\n   toggleGifPlaying = () => this.setState({isPlaying: !this.state.isPlaying});\n\n   render() {\n       const {isPlaying} = this.state;\n       const {imageData, title, cellWidth} = this.props;\n       const iconName = isPlaying ? 'pause': 'play';\n       const currentImage = isPlaying ? imageData.moving : imageData.still;\n       const imageWidth = cellWidth - (GIF_PADDING*2);\n       const imageHeight = (currentImage.height/currentImage.width)*cellWidth;\n       return (\n        <div className=\"imageContainer\" onClick={this.toggleGifPlaying} style={{margin: `${GIF_PADDING}px`}}>\n            <img className=\"imageControl\" src={require(`../../assets/${iconName}.svg`)} alt=\"play pause button\"/>\n            <img className='gifImage' src={currentImage.url} width={imageWidth} height={imageHeight} alt={title}\n            />\n        </div>\n       )\n   }\n}\n\nGif.defaultProps = {\n    gridData: [],\n    isPlayingAll: false\n}\n\nGif.propTypes = {\n    gridData: PropTypes.array,\n    isPlayingAll: PropTypes.bool\n}\n\nexport default Gif","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {getCellWidth} from '../../utils/common.utils' \nimport Gif from '../Gif';\nimport './Grid.css';\nclass Grid extends Component {\n\n    getGridColumn = (gridData, cellWidth) => \n         gridData.map((gridItemData) =>  \n         <Gif imageData={gridItemData} key={gridItemData.key} \n         cellWidth={cellWidth} isPlayingAll={this.props.isPlayingAll}\n         />\n    );\n\n    render() {\n        const cellWidth = getCellWidth(this.props.gridData.length);\n        const renderGrid = this.props.gridData.map((gridColumnData, index) => (\n            <div key={index}>{this.getGridColumn(gridColumnData.data, cellWidth)}</div>)\n        );\n        return (\n            <div className='gridContainer'>\n                {renderGrid}    \n            </div>\n        )\n    }\n}\n\nGrid.defaultProps = {\n    gridData: [],\n    isPlayingAll: false\n}\n\nGrid.propTypes = {\n    gridData: PropTypes.array,\n    isPlayingAll: PropTypes.bool\n}\n\nexport default Grid","import React from 'react';\nimport PropTypes from 'prop-types'; \nimport './Header.css';\n\nconst Header = (props) => {\n    const {isPlayingAll, togglePlayingState} = props;\n    const gifControlText = isPlayingAll ? 'Pause All' : 'Play All';\n    return (\n     <div className=\"headerContainer\">\n        <div className=\"logoAndSearchContainer\">\n            <img src={require('../../assets/appLogo.png')} className=\"appLogo\" alt=\"app logo\"/>\n            {props.children}\n        </div>\n        <div className=\"controlContainer\">\n                <div onClick={() => props.getTrendingGif()} className=\"controlButton\">Trending</div>\n                <div onClick={togglePlayingState}  className=\"controlButton\">{gifControlText}</div>\n        </div>\n     </div>\n    )\n}\n\nHeader.defaultProps = {\n    isPlayingAll: false, \n    togglePlayingState: () => {}\n}\n\nHeader.propTypes = {\n    isPlayingAll: PropTypes.bool,\n    togglePlayingState: PropTypes.func\n}\n\nexport default Header","import React, {Component} from 'react';\nimport { formatGiphyData, initialiseDataArray, isScrollBottom } from '../../utils/common.utils';\nimport { callGiphyAPI } from '../../utils/api.utils';\nimport Search from '../Search';\nimport Grid from '../Grid';\nimport Header from '../Header';\nimport './App.css';\nclass App extends Component {\n    state = {\n        searchValue: '',\n        apiCallCount: 0,\n        gridData: [],\n        isPlayingAll: false,\n        noGIf: false,\n        apiCallInProgress: false\n    }\n    componentDidMount = () => {\n      this.updateGiphyData();\n      window.addEventListener('scroll', this.onScroll,false);\n    }\n    updateGiphyData = async (searchValue = '') => {\n      await this.setState({searchValue, apiCallCount: 0, gridData: initialiseDataArray()});\n      await this.getGiphyData();\n    }\n    onScroll = () => isScrollBottom() && this.getGiphyData();\n    getGiphyData = () => {\n      const {apiCallCount, gridData, searchValue, apiCallInProgress} = this.state;\n      if(!apiCallInProgress) {\n        this.setState({apiCallInProgress: true});\n        callGiphyAPI(searchValue, apiCallCount)\n          .then((response) => {\n            const formattedData = formatGiphyData(response.data, gridData)\n            this.setState({gridData: formattedData, apiCallCount: apiCallCount + 1, apiCallInProgress: false, noGIf: !response.data.length});\n          }).catch(() => this.setState({apiCallInProgress: false}))\n      }\n    }\n    togglePlayingState = () => this.setState({isPlayingAll: !this.state.isPlayingAll});\n    componentWillUnmount = () => {\n      window.removeEventListener('scroll', this.onScroll, false);\n    }\nrender() {\n  const {isPlayingAll, noGIf, gridData} = this.state;\n  return (\n    <div className=\"appContainer\">\n      <Header togglePlayingState={this.togglePlayingState} isPlayingAll={isPlayingAll} getTrendingGif={this.updateGiphyData}>\n        <Search updateSearchValue={this.updateGiphyData}/>\n      </Header>\n      { !noGIf ? <Grid gridData={gridData} isPlayingAll={isPlayingAll}/>\n      : <div className=\"noGifMessage\"> No gif found! :) </div>\n      }\n\n    </div>\n  );\n}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}