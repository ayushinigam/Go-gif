{"version":3,"sources":["assets/search.svg","assets sync /^/.//.*/.svg$","assets/pause.svg","assets/play.svg","assets/appLogo.png","utils/common.utils.js","constants.js","utils/api.utils.js","components/Search/index.js","components/Gif/index.js","components/Grid/index.js","components/Header/index.js","components/App/index.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./pause.svg","./play.svg","./search.svg","webpackContext","req","id","webpackContextResolve","o","e","Error","code","keys","Object","resolve","initialiseDataArray","noOfColumns","currentScreenWidth","window","innerWidth","getNoOfColumns","Array","fill","data","totalHeight","formatGiphyData","dataFromGiphyAPI","arguments","length","undefined","gridData","forEach","gifData","heightArray","columnHeightArray","g","currentColumnIndex","indexOf","Math","min","apply","toConsumableArray","push","moving","images","fixed_width","still","fixed_width_still","key","title","Number","height","isScrollBottom","innerHeight","scrollY","document","body","offsetHeight","callGiphyAPI","searchValue","count","apiPath","concat","fetch","then","response","json","catch","err","console","error","Search","state","value","onKeyDown","event","_this","updateValue","onChange","setState","target","props","updateSearchValue","react_default","a","createElement","className","type","this","placeholder","disabled","src","require","alt","onClick","Component","defaultProps","Gif","isPlaying","isPlayingAll","cachedProp","toggleGifPlaying","_this$props","imageData","cellWidth","iconName","currentImage","imageHeight","width","style","margin","url","GIF_PADDING","href","data-action","nextProps","prevState","React","Grid","getGridColumn","gridItemData","components_Gif","gridLength","_this2","renderGrid","gridColumnData","index","Header","togglePlayingState","gifControlText","children","App","apiCallCount","noGIf","componentDidMount","_callee","regenerator_default","wrap","_context","prev","next","callGetGif","addEventListener","onScroll","stop","_this$state","formattedData","_callee2","_context2","componentWillUnmount","removeEventListener","_this$state2","components_Header","components_Search","components_Grid","ReactDOM","render","components_App","getElementById"],"mappings":"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","file":"static/js/main.c9b597ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search.35fb3dd2.svg\";","var map = {\n\t\"./pause.svg\": 23,\n\t\"./play.svg\": 24,\n\t\"./search.svg\": 9\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 22;","module.exports = __webpack_public_path__ + \"static/media/pause.ca47aee8.svg\";","module.exports = __webpack_public_path__ + \"static/media/play.fd3f2017.svg\";","module.exports = __webpack_public_path__ + \"static/media/appLogo.15c492c6.png\";","import {MIN_WIDTH_DESKTOP, MAX_WIDTH_DESKTOP, SCROLL_OFFSET} from '../constants';\n\n/**\n * getNoOfColumns: returns the no of columns based on the screen viewport width\n */\nexport const getNoOfColumns = () => {\n    const currentScreenWidth = window.innerWidth;    \n    let noOfColumns = 2; // Minimum no of columns\n    if(currentScreenWidth > MAX_WIDTH_DESKTOP) {        \n        noOfColumns = 6;\n    }    \n    else if(currentScreenWidth >= MIN_WIDTH_DESKTOP) {\n        noOfColumns = 4;\n    }  \n    return noOfColumns;\n}\n\n/**\n * initialiseDataArray: returns an array with filled initial value\n * to store data and total height of each column\n */\nexport const initialiseDataArray = () => {\n    const noOfColumns = getNoOfColumns();\n    const arr = new Array(noOfColumns).fill(null);\n    return arr.map(() => ( {data: [], totalHeight: 0})); \n}\n\n/**\n * findIndexOfLowestHeightColumn: returns the index of the column with the lowest height\n */\nexport const findIndexOfLowestHeightColumn = (heightArray) => heightArray.indexOf(Math.min(...heightArray));\n\n/**\n * formatData: returns formatted data from the api according to column structure \n * defined in 'initialiseDataArray'\n */\nexport const formatGiphyData = (dataFromGiphyAPI = [], gridData) => {\n    dataFromGiphyAPI.forEach( gifData => {\n        const columnHeightArray = gridData.map(g => g.totalHeight);\n        const currentColumnIndex = findIndexOfLowestHeightColumn(columnHeightArray);\n        gridData[currentColumnIndex].data.push({\n            moving: gifData.images.fixed_width,\n            still: gifData.images.fixed_width_still,\n            key: gifData.id,\n            title: gifData.title\n        });\n        gridData[currentColumnIndex].totalHeight += Number(gifData.images.fixed_width.height);\n    });\n  return gridData;\n}\n\nexport const isScrollBottom = () => (window.innerHeight + window.scrollY) >= (document.body.offsetHeight - SCROLL_OFFSET);\nexport const getCellWidth = (gridLength) => ((window.innerWidth-120) / gridLength);","export const APIKEY = 'lmdFUQVnyLK4jA2jRvnLKjqUXfE0mY6G';\nexport const GIF_LIMIT = 20;\nexport const BASE_URL = 'https://api.giphy.com/v1/gifs/';\nexport const MIN_WIDTH_DESKTOP = 768;\nexport const MAX_WIDTH_DESKTOP = 1600;\nexport const SCROLL_OFFSET = 200;\nexport const GIF_PADDING = 10;","import {APIKEY, GIF_LIMIT, BASE_URL} from '../constants'\n\n// export const getGif = () => \n// fetch(`${BASE_URL}search?q=${searchValue}&api_key=${APIKEY}&limit=${GIF_LIMIT}&offset=${(count*GIF_LIMIT)}`)\n// .then((response) => response.json())\n// .then((response) => response)\n// .catch((err) => console.error(err));\n\n\n\n\nexport const callGiphyAPI = (searchValue = '', count=0, path) => {\n    const apiPath = searchValue ? `search?q=${searchValue}&` :  'trending?';\n    return fetch(`${BASE_URL}${apiPath}api_key=${APIKEY}&limit=${GIF_LIMIT}&offset=${(count*GIF_LIMIT)}`)\n    .then((response) => response.json())\n    .then((response) => response)\n    .catch((err) => console.error(err));\n}","import React, {Component} from 'react';\nimport PropTypes from 'prop-types'; \nimport './Search.css';\n\nclass Search extends Component {\n    state = {\n        value: ''\n    }\n    onKeyDown = (event) => event.key === 'Enter' && this.updateValue();\n    onChange = (event) => this.setState({value: event.target.value});\n    updateValue = () => this.props.updateSearchValue(this.state.value);\n   render() {       \n       return (\n           <div className='searchContainer'>\n            <input type = 'text' \n            onKeyDown = {this.onKeyDown}\n            onChange={this.onChange}\n            placeholder='Search'\n            className=\"searchInput\"\n            disabled={this.props.disabled}\n            />\n           <span><img className=\"searchIcon\" src={require(`../../assets/search.svg`)} alt=\"search\" onClick={this.updateValue}/></span>\n           </div>\n       )\n   }\n}\n\nSearch.defaultProps = {\n    updateSearchValue: () => {}\n}\n\nSearch.propTypes = {\n    updateSearchValue: PropTypes.func\n}\n\nexport default Search","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {GIF_PADDING} from '../../constants';\nimport './Gif.css';\n\nclass Gif extends React.Component {\n   state = {\n       isPlaying: this.props.isPlayingAll,\n       cachedProp: this.props.isPlayingAll\n   }\n\n   static getDerivedStateFromProps(nextProps, prevState) {\n    if(nextProps.isPlayingAll !== prevState.cachedProp) {\n        return {isPlaying: nextProps.isPlayingAll, cachedProp: nextProps.isPlayingAll};\n    }\n    return null;\n   }\n\n   toggleGifPlaying = () => this.setState({isPlaying: !this.state.isPlaying});\n\n   render() {\n       const {isPlaying} = this.state;\n       const {imageData, title, cellWidth} = this.props;\n       const iconName = isPlaying ? 'pause': 'play';\n       const currentImage = isPlaying ? imageData.moving : imageData.still;\n       const imageHeight = (currentImage.height/currentImage.width)*cellWidth;\n       return (\n        <div className=\"imageContainer\" onClick={this.toggleGifPlaying} style={{margin: `${GIF_PADDING}px`}}>\n            <img className=\"imageControl\" src={require(`../../assets/${iconName}.svg`)}/>\n            <img className='gifImage' src={currentImage.url} width={cellWidth-(GIF_PADDING*2)} height={imageHeight} alt={title}\n            />\n             <a href={`https://api.whatsapp.com/send?text=${imageData.moving.url}`} data-action=\"share/whatsapp/share\">Share via Whatsapp web</a>\n        </div>\n       )\n   }\n}\n\nGif.defaultProps = {\n    gridData: [],\n    isPlayingAll: false\n}\n\nGif.propTypes = {\n    gridData: PropTypes.array,\n    isPlayingAll: PropTypes.bool\n}\n\nexport default Gif","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {getCellWidth} from '../../utils/common.utils' \nimport Gif from '../Gif';\nimport './Grid.css';\nclass Grid extends Component {\n\n    getGridColumn = (gridData, cellWidth) => \n         gridData.map((gridItemData) =>  \n         <Gif imageData={gridItemData} key={gridItemData.id} \n         cellWidth={cellWidth} isPlayingAll={this.props.isPlayingAll}\n         />\n    );\n\n    render() {\n        const cellWidth = getCellWidth(this.props.gridData.length);\n        const renderGrid = this.props.gridData.map((gridColumnData, index) => (\n            <div key={index}>{this.getGridColumn(gridColumnData.data, cellWidth)}</div>)\n        );\n        return (\n            <div className='gridContainer'>\n                {renderGrid}    \n            </div>\n        )\n    }\n}\n\nGrid.defaultProps = {\n    gridData: [],\n    isPlayingAll: false\n}\n\nGrid.propTypes = {\n    gridData: PropTypes.array,\n    isPlayingAll: PropTypes.bool\n}\n\nexport default Grid","import React, {Component} from 'react';\nimport PropTypes from 'prop-types'; \nimport './Header.css';\n\nconst Header = (props) => {\n    const {isPlayingAll, togglePlayingState} = props;\n    const gifControlText = isPlayingAll ? 'Pause All' : 'Play All';\n    return (\n     <div  className=\"headerContainer\">\n        <img src={require('../../assets/appLogo.png')} className=\"appLogo\"/>\n        {props.children}\n        <div className=\"controlsContainer\" onClick={togglePlayingState}>\n                {gifControlText}\n        </div>\n     </div>\n    )\n}\n\nHeader.defaultProps = {\n    isPlayingAll: false, \n    togglePlayingState: () => {}\n}\n\nHeader.propTypes = {\n    isPlayingAll: PropTypes.bool,\n    togglePlayingState: PropTypes.func\n}\n\nexport default Header","import React, {Component} from 'react';\nimport { formatGiphyData, initialiseDataArray, isScrollBottom } from '../../utils/common.utils';\nimport { callGiphyAPI } from '../../utils/api.utils';\nimport Search from '../Search';\nimport Grid from '../Grid';\nimport Header from '../Header';\nimport './App.css';\nclass App extends Component {\n    state = {\n        searchValue: '',\n        apiCallCount: 0,\n        gridData: [],\n        isPlayingAll: false,\n        noGIf: false\n    }\n    componentDidMount = async () => {\n      await this.setState({gridData: initialiseDataArray()});\n      await this.callGetGif();\n      window.addEventListener('scroll', this.onScroll, false);\n    }\n    onScroll = () => isScrollBottom() && this.callGetGif();\n    callGetGif = () => {\n      const {searchValue, apiCallCount, gridData} = this.state;\n      callGiphyAPI(searchValue, apiCallCount)\n      .then((response) => {\n        if(response.data.length) {\n          const formattedData = formatGiphyData(response.data, gridData)\n          this.setState({gridData: formattedData,apiCallCount: apiCallCount + 1});\n        } else {\n          this.setState({noGIf: true});\n        }\n      })\n    }\n    updateSearchValue = async (value) => {\n        await this.setState({searchValue: value, apiCallCount: 0, gridData: initialiseDataArray()});\n        this.callGetGif();\n    }\n    togglePlayingState = () => this.setState({isPlayingAll: !this.state.isPlayingAll});\n    componentWillUnmount = () => {\n      window.removeEventListener('scroll', this.onScroll, false);\n    }\nrender() {\n  const {isPlayingAll, noGIf} = this.state;\n  return (\n    <div className=\"appContainer\">\n      <Header togglePlayingState={this.togglePlayingState} isPlayingAll={isPlayingAll}>\n        <Search updateSearchValue={this.updateSearchValue}/>\n      </Header>\n      {!noGIf ? <Grid gridData={this.state.gridData} isPlayingAll={isPlayingAll}/>\n      : <div className=\"noGifMessage\"> No gif found! 😔 </div>\n      }\n\n    </div>\n  );\n}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}