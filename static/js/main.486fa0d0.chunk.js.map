{"version":3,"sources":["assets sync /^/.//.*/.svg$","assets/pause.svg","assets/play.svg","assets/appLogo.png","utils/common.utils.js","constants.js","utils/api.utils.js","components/Search/index.js","components/Gif/index.js","components/Grid/index.js","components/Header/index.js","components/App/index.js","index.js"],"names":["map","./pause.svg","./play.svg","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","p","initialiseDataArray","noOfColumns","currentScreenWidth","window","innerWidth","getNoOfColumns","Array","fill","data","totalHeight","formatGiphyData","dataFromGiphyAPI","arguments","length","undefined","gridData","forEach","gifData","heightArray","columnHeightArray","g","currentColumnIndex","indexOf","Math","min","apply","toConsumableArray","push","moving","images","fixed_width","still","fixed_width_still","key","title","Number","height","isScrollBottom","innerHeight","scrollY","document","body","offsetHeight","getGif","searchValue","count","fetch","concat","then","response","json","catch","err","console","error","Search","state","value","onKeyDown","event","_this","updateValue","onChange","setState","target","props","updateSearchValue","react_default","a","createElement","type","this","placeholder","className","Component","defaultProps","Gif","isPlaying","isPlayingAll","cachedProp","toggleGifPlaying","_this$props","imageData","cellWidth","iconName","currentImage","imageHeight","width","onClick","style","margin","src","require","url","GIF_PADDING","alt","nextProps","prevState","React","Grid","getGridColumn","gridItemData","components_Gif","gridLength","_this2","renderGrid","gridColumnData","index","Header","togglePlayingState","gifControlText","App","apiCallCount","noGIf","onScroll","callGetGif","_this$state","formattedData","_callee","regenerator_default","wrap","_context","prev","next","stop","addEventListener","removeEventListener","_this$state2","components_Header","components_Search","components_Grid","ReactDOM","render","components_App","getElementById"],"mappings":"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","file":"static/js/main.486fa0d0.chunk.js","sourcesContent":["var map = {\n\t\"./pause.svg\": 22,\n\t\"./play.svg\": 23\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 21;","module.exports = __webpack_public_path__ + \"static/media/pause.ca47aee8.svg\";","module.exports = __webpack_public_path__ + \"static/media/play.fd3f2017.svg\";","module.exports = __webpack_public_path__ + \"static/media/appLogo.15c492c6.png\";","import {MIN_WIDTH_DESKTOP, MAX_WIDTH_DESKTOP, SCROLL_OFFSET} from '../constants';\n\n/**\n * getNoOfColumns: returns the no of columns based on the screen viewport width\n */\nexport const getNoOfColumns = () => {\n    const currentScreenWidth = window.innerWidth;    \n    let noOfColumns = 2; // Minimum no of columns\n    if(currentScreenWidth > MAX_WIDTH_DESKTOP) {        \n        noOfColumns = 6;\n    }    \n    else if(currentScreenWidth >= MIN_WIDTH_DESKTOP) {\n        noOfColumns = 4;\n    }  \n    return noOfColumns;\n}\n\n/**\n * initialiseDataArray: returns an array with filled initial value\n * to store data and total height of each column\n */\nexport const initialiseDataArray = () => {\n    const noOfColumns = getNoOfColumns();\n    const arr = new Array(noOfColumns).fill(null);\n    return arr.map(() => ( {data: [], totalHeight: 0})); \n}\n\n/**\n * findIndexOfLowestHeightColumn: returns the index of the column with the lowest height\n */\nexport const findIndexOfLowestHeightColumn = (heightArray) => heightArray.indexOf(Math.min(...heightArray));\n\n/**\n * formatData: returns formatted data from the api according to column structure \n * defined in 'initialiseDataArray'\n */\nexport const formatGiphyData = (dataFromGiphyAPI = [], gridData) => {\n    dataFromGiphyAPI.forEach( gifData => {\n        const columnHeightArray = gridData.map(g => g.totalHeight);\n        const currentColumnIndex = findIndexOfLowestHeightColumn(columnHeightArray);\n        gridData[currentColumnIndex].data.push({\n            moving: gifData.images.fixed_width,\n            still: gifData.images.fixed_width_still,\n            key: gifData.id,\n            title: gifData.title\n        });\n        gridData[currentColumnIndex].totalHeight += Number(gifData.images.fixed_width.height);\n    });\n  return gridData;\n}\n\nexport const isScrollBottom = () => (window.innerHeight + window.scrollY) >= (document.body.offsetHeight - SCROLL_OFFSET);\nexport const getCellWidth = (gridLength) => ((window.innerWidth-120) / gridLength);","export const APIKEY = 'lmdFUQVnyLK4jA2jRvnLKjqUXfE0mY6G';\nexport const GIF_LIMIT = 20;\nexport const BASE_URL = 'http://api.giphy.com/v1/gifs/';\nexport const MIN_WIDTH_DESKTOP = 768;\nexport const MAX_WIDTH_DESKTOP = 1024;\nexport const SCROLL_OFFSET = 200;\nexport const GIF_PADDING = 10;","import {APIKEY, GIF_LIMIT, BASE_URL} from '../constants'\n\nexport const getGif = (searchValue, count=0) => \nfetch(`${BASE_URL}search?q=${searchValue}&api_key=${APIKEY}&limit=${GIF_LIMIT}&offset=${(count*GIF_LIMIT)}`)\n.then((response) => response.json())\n.then((response) => response)\n.catch((err) => console.error(err));\n\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types'; \nimport './Search.css';\n\nclass Search extends Component {\n    state = {\n        value: ''\n    }\n    onKeyDown = (event) => event.key === 'Enter' && this.updateValue();\n    onChange = (event) => this.setState({value: event.target.value});\n    updateValue = () => this.props.updateSearchValue(this.state.value);\n   render() {       \n       return (\n           <input type = 'text' \n           onKeyDown = {this.onKeyDown}\n           onChange={this.onChange}\n           placeholder='Search'\n           className=\"searchInput\"\n           />\n       )\n   }\n}\n\nSearch.defaultProps = {\n    updateSearchValue: () => {}\n}\n\nSearch.propTypes = {\n    updateSearchValue: PropTypes.func\n}\n\nexport default Search","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {GIF_PADDING} from '../../constants';\nimport './Gif.css';\n\nclass Gif extends React.Component {\n   state = {\n       isPlaying: this.props.isPlayingAll,\n       cachedProp: this.props.isPlayingAll\n   }\n\n   static getDerivedStateFromProps(nextProps, prevState) {\n    if(nextProps.isPlayingAll !== prevState.cachedProp) {\n        return {isPlaying: nextProps.isPlayingAll, cachedProp: nextProps.isPlayingAll};\n    }\n    return null;\n   }\n\n   toggleGifPlaying = () => this.setState({isPlaying: !this.state.isPlaying});\n\n   render() {\n       const {isPlaying} = this.state;\n       const {imageData, title, cellWidth} = this.props;\n       const iconName = isPlaying ? 'pause': 'play';\n       const currentImage = isPlaying ? imageData.moving : imageData.still;\n       const imageHeight = (currentImage.height/currentImage.width)*cellWidth;\n       return (\n        <div className=\"imageContainer\" onClick={this.toggleGifPlaying} style={{margin: `${GIF_PADDING}px`}}>\n            <img className=\"imageControl\" src={require(`../../assets/${iconName}.svg`)}/>\n            <img className='gifImage' src={currentImage.url} width={cellWidth-(GIF_PADDING*2)} height={imageHeight} alt={title}\n            />\n        </div>\n       )\n   }\n}\n\nGif.defaultProps = {\n    gridData: [],\n    isPlayingAll: false\n}\n\nGif.propTypes = {\n    gridData: PropTypes.array,\n    isPlayingAll: PropTypes.bool\n}\n\nexport default Gif","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {getCellWidth} from '../../utils/common.utils' \nimport Gif from '../Gif';\nimport './Grid.css';\nclass Grid extends Component {\n\n    getGridColumn = (gridData, cellWidth) => \n         gridData.map((gridItemData) =>  \n         <Gif imageData={gridItemData} key={gridItemData.id} \n         cellWidth={cellWidth} isPlayingAll={this.props.isPlayingAll}\n         />\n    );\n\n    render() {\n        const cellWidth = getCellWidth(this.props.gridData.length);\n        const renderGrid = this.props.gridData.map((gridColumnData, index) => (\n            <div key={index}>{this.getGridColumn(gridColumnData.data, cellWidth)}</div>)\n        );\n        return (\n            <div className='gridContainer'>\n                {renderGrid}    \n            </div>\n        )\n    }\n}\n\nGrid.defaultProps = {\n    gridData: [],\n    isPlayingAll: false\n}\n\nGrid.propTypes = {\n    gridData: PropTypes.array,\n    isPlayingAll: PropTypes.bool\n}\n\nexport default Grid","import React, {Component} from 'react';\nimport PropTypes from 'prop-types'; \nimport './Header.css';\n\nconst Header = (props) => {\n    const {isPlayingAll, togglePlayingState} = props;\n    const gifControlText = isPlayingAll ? 'Pause All' : 'Play All';\n    return (\n     <div  className=\"headerContainer\">\n        <img src={require('../../assets/appLogo.png')} className=\"appLogo\"/>\n        <div className=\"controlsContainer\" onClick={togglePlayingState}>\n                {gifControlText}\n        </div>\n     </div>\n    )\n}\n\nHeader.defaultProps = {\n    isPlayingAll: false, \n    togglePlayingState: () => {}\n}\n\nHeader.propTypes = {\n    isPlayingAll: PropTypes.bool,\n    togglePlayingState: PropTypes.func\n}\n\nexport default Header","import React, {Component} from 'react';\nimport { formatGiphyData, initialiseDataArray, isScrollBottom } from '../../utils/common.utils';\nimport { getGif } from '../../utils/api.utils';\nimport Search from '../Search';\nimport Grid from '../Grid';\nimport Header from '../Header';\nimport './App.css';\nclass App extends Component {\n    state = {\n        searchValue: '',\n        apiCallCount: 0,\n        gridData: [],\n        isPlayingAll: false,\n        noGIf: false\n    }\n    componentDidMount() {\n      this.setState({gridData: initialiseDataArray()});\n      window.addEventListener('scroll', this.onScroll, false);\n    }\n    onScroll = () => isScrollBottom() && this.callGetGif();\n    callGetGif = () => {\n      const {searchValue, apiCallCount, gridData} = this.state;\n      getGif(searchValue, apiCallCount)\n      .then((response) => {\n        if(response.data.length) {\n          const formattedData = formatGiphyData(response.data, gridData)\n          this.setState({gridData: formattedData,apiCallCount: apiCallCount + 1});\n        } else {\n          this.setState({noGIf: true});\n        }\n      })\n    }\n    updateSearchValue = async (value) => {\n        await this.setState({searchValue: value, apiCallCount: 0, gridData: initialiseDataArray()});\n        this.callGetGif();\n    }\n    togglePlayingState = () => this.setState({isPlayingAll: !this.state.isPlayingAll});\n    componentWillUnmount() {\n      window.removeEventListener('scroll', this.onScroll, false);\n    }\nrender() {\n  const {isPlayingAll, noGIf} = this.state;\n  return (\n    <div className=\"appContainer\">\n      <Header togglePlayingState={this.togglePlayingState} isPlayingAll={isPlayingAll}/>\n      <Search updateSearchValue={this.updateSearchValue}/>\n      {!noGIf ? <Grid gridData={this.state.gridData} isPlayingAll={isPlayingAll}/>\n      : <div className=\"noGifMessage\"> No gif found! 😔 </div>\n      }\n\n    </div>\n  );\n}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}